1. 改进时间所做工作。


首先，修改了saveData中的函数，使其需要有一个参数'name'这样就不会每一次都进入到'list'里面了。我自己测试就设置一个新的类'test'吧。




可以改进的工作：
	时间可以加上一个createtime表示创建时间。



云开发数据集应该是非关系型的数据库，所以应该不设置主键吧。每个数据集中的数据都有一个唯一的_id用来分开，_id是不可写的，自动生成的。


为了防止误操作以及保护小程序体验，小程序端在获取集合数据时服务器一次默认并且最多返回 20 条记录，云函数端这个数字则是 100。开发者可以通过 limit 方法指定需要获取的记录数量，但小程序端不能超过 20 条，云函数端不能超过 100 条。






login函数：（关联集合为usr）
login函数的功能就是存储用户的信息。我们都知道如果我们在浏览信息的时候，我们可能不可避免地要查看用户信息。但是用户信息又不是那么好收集的。这个函数的功能也是比较容易理解的逻辑。每当用户登录到数据库的时候。
如果能够找到用户在数据集中的数据，那么就更新文件名和文件路径。同时删除原来的文件路径。
如果找不到用户在数据集中的数据，就添加新的数据。
需要的输入为：
usrhead;  //头像的相对路径
usrid;  //微信用户的id。
usrname;  //微信用户姓名。
返回值：
true

downloadlogin函数：（关联集合为usr）
我们有时候是需要信息的。比如说某个人的评论我们想要加载出来，我们可能需要读取其中的用户id信息然后我们需要通过这个得到其一些登录信息。这个登录信息怎么看呢？这个就是根据usrid得到用户的昵称和用户的头像的云路径。
需要的输入为：
usrid;  //微信用户的id。string类型。
返回值：
数据库get()得到的值。


saveData函数：（关联集合为mytest）
mytest记录一个人上传的信息。这些信息包括图片在云存储的路径、写下的文字、上传时的本机时间和在服务器上创建相应记录的时间，同时喜欢的人的数量初始化为0。然后我们往mytest中添加了这条记录以后，在数据中会自动生成_id作为唯一标识。然后我们再往like集合里面添加新纪录，新纪录有一个wholike的记录。这个记录为一个列表。
需要的输入为：
text;  //记录你说了什么话。string类型。
fileIDs;  //文件就文件的路径。列表类型。
name;  //集合的名字。string类型。
time;  //记录本机时间。 string类型。
返回值：
true。


getData函数：（关联集合为mytest）
返回mytest中的所有数据（目前只支持最多100条）。然后按照时间进行排序。日期比较靠后的先返回。
需要的输入为：
name;   //集合的名字。string类型。
返回值：
至多大小为100的列表。

